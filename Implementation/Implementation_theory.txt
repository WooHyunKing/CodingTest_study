코딩 테스트에서 구현이란 ‘머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정’이다.

흔히 문제 해결 분야에서 구현 유형의 문제는 ‘풀이를 떠올리는 것은 쉽지만 소스코드로 옮기기 어려운 문제’를 의미한다. ⇒ 대체적으로 사소한 조건 설정이 많은 문제일수록 코드로 구현하기 까다롭다.

- 알고리즘은 코드가 지나칠 만큼 길어지는 문제
- 특정 소수점 자리까지 출력해야 하는 문제
- 문자열이 입력으로 주어졌을 때 한 문자 단위로 끊어서 리스트에 넣어야 하는 문제
- …

이 책에서는 완전 탐색, 시뮬레이션 유형을 모두 구현 유형으로 묶어서 다루고 있다.

완전 탐색 : 모든 경우의 수를 주저 없이 다 계산하는 해결 방법

시뮬레이션 : 문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행해야 하는 문제

코딩 테스트에서는 어떤 환경에서 문제를 풀어야 하는지를 알고 그 환경에 맞게 프로그래밍 언어를 적절히 사용하여 구현하는 일이 중요하므로, 먼저 코딩 테스트 채점 시스템의 제약에 대해 알아야 한다.

## C/C++에서 변수의 표현 범위

C/C++에서는 int/long long/BigInteger Class를 사용하여 정수를 다룬다.

반면에 파이썬에서는 프로그래머가 직접 자료형을 지정할 필요가 없으며 매우 큰 수의 연산 또한 기본으로 지원한다.

따라서 파이썬을 이용한다면 자료형의 표현 범위 제한에 대해 깊게 이해하고 있지 않아도 괜찮다.

다만, 파이썬에서의 실수형 변수는 다른 언어와 마찬가지로 유효숫자에 따라 연산 결과가 원하는 대로 나오지 않을 수 있다.

## 파이썬에서 리스트 크기

파이썬은 다른 언어에 비해서 구현상의 복잡함이 적은 편이지만 데이터 처리량이 많을 때는 꼭 메모리 제한을 고려하도록 하자.

리스트를 여러 개 선언하고, 그중에서 크기가 1000만 이상인 리스트가 있다면 메모리 용량 제한으로 문제를 풀 수 없게 되는 경우도 있다는 점을 기억하자. ⇒ 이런 문제는 드물다 !

일반적인 코딩 테스트 수준에서는 메모리 사용량 제한보다 더 적은 크기의 메모리를 사용해야 한다.

## 구현 문제에 접근하는 방법

보통 구현 유형의 문제는 사소한 입력 조건 등을 문제에서 명시해주며 문제의 길이가 꽤 긴 편이다.

Pypy3는 Python3의 문법을 그대로 지원하며, 대부분 Python3보다 실행 속도가 더 빠르다.

이 말은 코딩 테스트에서 Pypy3를 선택한다면 Python3과 동일한 코드를 제출해서 실행 시간을 줄일 수 있다는 의미이다.

특히 반복문이 많을수록 Pypy3와 Python3의 속도가 차이 나는데, Pypy3의 실행 속도는 때론 C/C++와 견줄 만큼 빠르다.

따라서 코딩 테스트 환경이 Python3만 지원하는지, 혹은 Pypy3도 지원하는지 확인하고 만약 Pypy3도 지원한다면 이를 이용하자.

파이썬을 사용한다면 코딩 테스트에서 API 개발 문제를 직면하더라도 상대적으로 무난하게 대처할 수 있다.